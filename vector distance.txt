# Find the total value of the items for each Ear You Are store. Save the values in variables items1_value and items2_value.
# Find the total value of the items in both stores and save it in the total_value variable.

import numpy as np
import pandas as pd

store1_price = [209.9, 119.9, 53.9, 31.9, 19.9, 109.9, 59.99, 22.9, 81.11, 32.9]
store1_quantity = [19, 11, 8, 15, 23, 7, 14, 9, 10, 4]

store2_price = [209.9, 124.9, 42.9, 27.9, 23.9, 109.9, 49.9, 24.9, 89.9, 32.9]
store2_quantity = [10, 16, 20, 9, 18, 12, 10, 11, 18, 22]

models = ['Apple AirPods Pro',
          'Apple AirPods MV7N2RU/A',
          'JBL Tune 120TWS', 
          'JBL TUNE 500BT',
          'JBL JR300BT', 
          'Huawei Freebuds 3',
          'Philips TWS SHB2505',
          'Sony WH-CH500',
          'Sony WF-SP700N',
          'Sony WI-XB400',
         ]
items1 = pd.DataFrame({'Price':store1_price, 
                        'Quantity':store1_quantity}, index=models)
items2 = pd.DataFrame({'Price':store2_price, 
                        'Quantity':store2_quantity}, index=models)

items1_price = items1['Price'].values 
items1_quantity = items1['Quantity'].values 

items2_price = items2['Price'].values 
items2_quantity = items2['Quantity'].values 

# value of items for store 1
items1_value = np.sum(items1_price * items1_quantity)

# value of items for store 2
items2_value = np.sum(items2_price * items2_quantity)

total_value = items1_value + items2_value

print('Total value of the items of the two stores:', total_value, 'USD')


# Tabulate the distances between the towns and store the table to the distances variable. Present the data in the form of a list of lists. Each row should represent the distance from each town to all other towns.

import numpy as np
import pandas as pd
from scipy.spatial import distance

x_axis = np.array([0., 0.18078584, 9.32526599, 17.09628721,
                      4.69820241, 11.57529305, 11.31769349, 14.63378951])

y_axis  = np.array([0.0, 7.03050245, 9.06193657, 0.1718145,
                      5.1383203, 0.11069032, 3.27703365, 5.36870287])

deliveries = np.array([5, 7, 4, 3, 5, 2, 1, 1])

town = [
    'Willowford',
    'Otter Creek',
    'Springfield',
    'Arlingport',
    'Spadewood',
    'Goldvale',
    'Bison Flats',
    'Bison Hills',
]

data = pd.DataFrame(
    {
        'x_coordinates_km': x_axis,
        'y_coordinates_km': y_axis,
        'Deliveries': deliveries,
    },
    index=town,
)

vectors = data[['x_coordinates_km', 'y_coordinates_km']].values

distances = []
for i in range(len(vectors)):
    row = []
    for j in range(len(vectors)):
        row.append(distance.euclidean(vectors[i], vectors[j]))
    distances.append(row)

distances_df = pd.DataFrame(distances, index=town, columns=town)
print(distances_df)


# You know the weekly number of deliveries to each town. Using all this information together, you can select the best town to place the Flying Stuff warehouse.

import numpy as np
import pandas as pd
from scipy.spatial import distance

x_axis = np.array([0., 0.18078584, 9.32526599, 17.09628721,
                      4.69820241, 11.57529305, 11.31769349, 14.63378951])

y_axis  = np.array([0.0, 7.03050245, 9.06193657, 0.1718145,
                      5.1383203, 0.11069032, 3.27703365, 5.36870287])

deliveries = np.array([5, 7, 4, 3, 5, 2, 1, 1])

town = [
    'Willowford',
    'Otter Creek',
    'Springfield',
    'Arlingport',
    'Spadewood',
    'Goldvale',
    'Bison Flats',
    'Bison Hills',
]

data = pd.DataFrame(
    {
        'x_coordinates_km': x_axis,
        'y_coordinates_km': y_axis,
        'Deliveries': deliveries,
    },
    index=town,
)

vectors = data[['x_coordinates_km', 'y_coordinates_km']].values

distances = []
for town_from in range(len(town)):
    row = []
    for town_to in range(len(town)):
        value = distance.euclidean(vectors[town_from], vectors[town_to])
        row.append(value)
    distances.append(row)

deliveries_in_week = []
for i in range(len(town)):
    value = 2 * np.dot(np.array(distances[i]), deliveries)
    deliveries_in_week.append(value)

deliveries_in_week_df = pd.DataFrame(
    {'Distance': deliveries_in_week}, index=town
)

print(deliveries_in_week_df)

print()
print('Warehouse town:', deliveries_in_week_df['Distance'].idxmin())


# Write a function to find the Manhattan distance, manhattan_distance(). It should take two vectors as arguments and return the distance. Solve the task by using a vectorized function. Don't use any loops.

import numpy as np

def manhattan_distance(first, second):
    return np.sum(np.abs(first - second))

first = np.array([3, 11])
second = np.array([1, 6])

print(manhattan_distance(first, second))


# In a given area of Manhattan, let’s find the nearest of three vacant taxis.

# Declared variables:
  # avenues — Series with avenues as index and coordinates as values
  # streets — Series with streets as index and coordinates as values
  # address — location of the client (avenue and street)
  # taxis — taxi locations
    # Note that just as was the case with the Euclidean distance, we can calculate distances from the address to the cars using a corresponding SciPy library function. If you can't guess what it's called, have a look at the SciPy distance module documentation or check the hint.

#Calculate the distances and store the result to the taxi_distances variable. Determine the index of taxi_distances that corresponds to the nearest taxi and assign the result to the index variable. Print the location of the nearest taxi (avenue and street) on the screen (in precode).

import numpy as np
import pandas as pd
from scipy.spatial import distance

avenues = pd.Series([0, 153, 307, 524], index=['Park', 'Lexington', '3rd', '2nd'])
streets = pd.Series([0, 81, 159, 240, 324], index=['76', '75', '74', '73', '72'])

address = ['Lexington', '74']
taxis = [
    ['Park', '72'],
    ['2nd', '75'],
    ['3rd', '76'],
]

address_vector = np.array([avenues[address[0]], streets[address[1]]])

taxi_vectors = [np.array([avenues[taxi[0]], streets[taxi[1]]]) for taxi in taxis]
taxi_distances = [distance.cityblock(address_vector, taxi_vector) for taxi_vector in taxi_vectors]

index = np.argmin(taxi_distances)
print(taxis[index])


# Save the apartment vectors with indices 3 and 11 to variables vector_first and vector_second. Find the Euclidean and Manhattan distances between them. Print the results (in precode).

import pandas as pd
from scipy.spatial import distance

columns = [
    'bedrooms',
    'total area',
    'kitchen',
    'living area',
    'floor',
    'total floors',
]
realty = [
    [1, 38.5, 6.9, 18.9, 3, 5],
    [1, 38.0, 8.5, 19.2, 9, 17],
    [1, 34.7, 10.3, 19.8, 1, 9],
    [1, 45.9, 11.1, 17.5, 11, 23],
    [1, 42.4, 10.0, 19.9, 6, 14],
    [1, 46.0, 10.2, 20.5, 3, 12],
    [2, 77.7, 13.2, 39.3, 3, 17],
    [2, 69.8, 11.1, 31.4, 12, 23],
    [2, 78.2, 19.4, 33.2, 4, 9],
    [2, 55.5, 7.8, 29.6, 1, 25],
    [2, 74.3, 16.0, 34.2, 14, 17],
    [2, 78.3, 12.3, 42.6, 23, 23],
    [2, 74.0, 18.1, 49.0, 8, 9],
    [2, 91.4, 20.1, 60.4, 2, 10],
    [3, 85.0, 17.8, 56.1, 14, 14],
    [3, 79.8, 9.8, 44.8, 9, 10],
    [3, 72.0, 10.2, 37.3, 7, 9],
    [3, 95.3, 11.0, 51.5, 15, 23],
    [3, 69.3, 8.5, 39.3, 4, 9],
    [3, 89.8, 11.2, 58.2, 24, 25],
]

df_realty = pd.DataFrame(realty, columns=columns)

vector_first = df_realty.iloc[3].values
vector_second = df_realty.iloc[11].values

print('Euclidean distance:', distance.euclidean(vector_first, vector_second))
print('Manhattan distance:', distance.cityblock(vector_first, vector_second))


# Let's say that a client liked the apartment at index 12. Find the most similar apartment based on the Euclidean distance.
# Create a list with distances from each vector to vector 12. Calculate the index of the most similar listing and save to the best_index variable.

import numpy as np
import pandas as pd
from scipy.spatial import distance

columns = [
    'bedrooms',
    'total area',
    'kitchen',
    'living area',
    'floor',
    'total floors',
]
realty = [
    [1, 38.5, 6.9, 18.9, 3, 5],
    [1, 38.0, 8.5, 19.2, 9, 17],
    [1, 34.7, 10.3, 19.8, 1, 9],
    [1, 45.9, 11.1, 17.5, 11, 23],
    [1, 42.4, 10.0, 19.9, 6, 14],
    [1, 46.0, 10.2, 20.5, 3, 12],
    [2, 77.7, 13.2, 39.3, 3, 17],
    [2, 69.8, 11.1, 31.4, 12, 23],
    [2, 78.2, 19.4, 33.2, 4, 9],
    [2, 55.5, 7.8, 29.6, 1, 25],
    [2, 74.3, 16.0, 34.2, 14, 17],
    [2, 78.3, 12.3, 42.6, 23, 23],
    [2, 74.0, 18.1, 49.0, 8, 9],
    [2, 91.4, 20.1, 60.4, 2, 10],
    [3, 85.0, 17.8, 56.1, 14, 14],
    [3, 79.8, 9.8, 44.8, 9, 10],
    [3, 72.0, 10.2, 37.3, 7, 9],
    [3, 95.3, 11.0, 51.5, 15, 23],
    [3, 69.3, 8.5, 39.3, 4, 9],
    [3, 89.8, 11.2, 58.2, 24, 25],
]

df_realty = pd.DataFrame(realty, columns=columns)

# index of the preferred apartment
preference_index = 12
preference_vector = df_realty.loc[preference_index].values

distances = []
for i in range(df_realty.shape[0]):
    other_vector = df_realty.loc[i].values
    distances.append(distance.euclidean(preference_vector, other_vector))

best_index = np.array(distances).argsort()[1]

print('Index of the most similar apartment:', best_index)


# Write the nearest_neighbor_predict() function. It takes three arguments:
  # Training set features (train_features)
  # Training set target (train_target)
  # New observation features (new_features)
  # The function uses the nearest neighbors algorithm to return a target prediction for the new observation. 
# Run the function for the new observation (new_apartment). See if we can correctly predict the number of bedrooms. Print the results (in precode).

import numpy as np
import pandas as pd
from scipy.spatial import distance

columns = [
    'bedrooms',
    'total area',
    'kitchen',
    'living area',
    'floor',
    'total floors',
]

df_train = pd.DataFrame(
    [
        [1.0, 38.5, 6.9, 18.9, 3.0, 5.0],
        [1.0, 38.0, 8.5, 19.2, 9.0, 17.0],
        [1.0, 34.7, 10.3, 19.8, 1.0, 9.0],
        [1.0, 45.9, 11.1, 17.5, 11.0, 23.0],
        [1.0, 42.4, 10.0, 19.9, 6.0, 14.0],
        [1.0, 46.0, 10.2, 20.5, 3.0, 12.0],
        [2.0, 77.7, 13.2, 39.3, 3.0, 17.0],
        [2.0, 69.8, 11.1, 31.4, 12.0, 23.0],
        [2.0, 78.2, 19.4, 33.2, 4.0, 9.0],
        [2.0, 55.5, 7.8, 29.6, 1.0, 25.0],
        [2.0, 74.3, 16.0, 34.2, 14.0, 17.0],
        [2.0, 78.3, 12.3, 42.6, 23.0, 23.0],
        [2.0, 74.0, 18.1, 49.0, 8.0, 9.0],
        [2.0, 71.4, 20.1, 60.4, 2.0, 10.0],
        [3.0, 85.0, 17.8, 56.1, 14.0, 14.0],
        [3.0, 79.8, 9.8, 44.8, 9.0, 10.0],
        [3.0, 72.0, 10.2, 37.3, 7.0, 9.0],
        [3.0, 95.3, 11.0, 51.5, 15.0, 23.0],
        [3.0, 69.3, 9.5, 42.3, 4.0, 9.0],
        [3.0, 89.8, 11.2, 58.2, 24.0, 25.0],
    ],
    columns=columns,
)


def nearest_neighbor_predict(train_features, train_target, new_features):
    distances = [distance.euclidean(new_features, train_features.loc[i].values) for i in range(len(train_features))]
    nearest_neighbor_index = np.argmin(distances)
    return train_target.iloc[nearest_neighbor_index]


train_features = df_train.drop('bedrooms', axis=1)
train_target = df_train['bedrooms']
new_apartment = np.array([72, 14, 39, 8, 16])
prediction = nearest_neighbor_predict(
    train_features, train_target, new_apartment
)
print(prediction)


# Create the NearestNeighborClassifier() class for the classification model. In this task we will work only on training. We'll leave prediction for the next task.
# Add the fit() method to the class. For the nearest neighbors algorithm, fit() will save the whole training set. 
# Save:
  # The training set features to self.features_train
  # The target to self.target_train
#Attributes can have the same names as the model parameters.
#Train the model and print its attributes (in precode).

import numpy as np
import pandas as pd
from scipy.spatial import distance

columns = ["bedrooms", "total area", "kitchen", "living area", "floor", "total floors"]

df_train = pd.DataFrame(
    [
        [1.0, 38.5, 6.9, 18.9, 3.0, 5.0],
        [1.0, 38.0, 8.5, 19.2, 9.0, 17.0],
        [1.0, 34.7, 10.3, 19.8, 1.0, 9.0],
        [1.0, 45.9, 11.1, 17.5, 11.0, 23.0],
        [1.0, 42.4, 10.0, 19.9, 6.0, 14.0],
        [1.0, 46.0, 10.2, 20.5, 3.0, 12.0],
        [2.0, 77.7, 13.2, 39.3, 3.0, 17.0],
        [2.0, 69.8, 11.1, 31.4, 12.0, 23.0],
        [2.0, 78.2, 19.4, 33.2, 4.0, 9.0],
        [2.0, 55.5, 7.8, 29.6, 1.0, 25.0],
        [2.0, 74.3, 16.0, 34.2, 14.0, 17.0],
        [2.0, 78.3, 12.3, 42.6, 23.0, 23.0],
        [2.0, 74.0, 18.1, 49.0, 8.0, 9.0],
        [2.0, 91.4, 20.1, 60.4, 2.0, 10.0],
        [3.0, 85.0, 17.8, 56.1, 14.0, 14.0],
        [3.0, 79.8, 9.8, 44.8, 9.0, 10.0],
        [3.0, 72.0, 10.2, 37.3, 7.0, 9.0],
        [3.0, 95.3, 11.0, 51.5, 15.0, 23.0],
        [3.0, 69.3, 8.5, 39.3, 4.0, 9.0],
        [3.0, 89.8, 11.2, 58.2, 24.0, 25.0],
    ],
    columns=columns,
)


train_features = df_train.drop("bedrooms", axis=1)
train_target = df_train["bedrooms"]

df_test = pd.DataFrame(
    [
        [1, 36.5, 5.9, 17.9, 2, 7],
        [2, 71.7, 12.2, 34.3, 5, 21],
        [3, 88.0, 18.1, 58.2, 17, 17],
    ],
    columns=columns,
)

test_features = df_test.drop("bedrooms", axis=1)

class NearestNeighborClassifier():
    def fit(self, features_train, target_train):
        self.features_train = features_train
        self.target_train = target_train

model = NearestNeighborClassifier()
model.fit(train_features, train_target)
print(model.features_train.head())
print(model.target_train.head())


# Add predict() to the NearestNeighborClassifier() class. Use the nearest_neighbor_predict() function that we already created as a template.
# Obtain predictions on the number of rooms. Note that the real answers are in the first column of df_test in the precode. Print the results.

import numpy as np
import pandas as pd
from scipy.spatial import distance

columns = [
    'bedrooms',
    'total area',
    'kitchen',
    'living area',
    'floor',
    'total floors',
]

df_train = pd.DataFrame(
    [
        [1.0, 38.5, 6.9, 18.9, 3.0, 5.0],
        [1.0, 38.0, 8.5, 19.2, 9.0, 17.0],
        [1.0, 34.7, 10.3, 19.8, 1.0, 9.0],
        [1.0, 45.9, 11.1, 17.5, 11.0, 23.0],
        [1.0, 42.4, 10.0, 19.9, 6.0, 14.0],
        [1.0, 46.0, 10.2, 20.5, 3.0, 12.0],
        [2.0, 77.7, 13.2, 39.3, 3.0, 17.0],
        [2.0, 69.8, 11.1, 31.4, 12.0, 23.0],
        [2.0, 78.2, 19.4, 33.2, 4.0, 9.0],
        [2.0, 55.5, 7.8, 29.6, 1.0, 25.0],
        [2.0, 74.3, 16.0, 34.2, 14.0, 17.0],
        [2.0, 78.3, 12.3, 42.6, 23.0, 23.0],
        [2.0, 74.0, 18.1, 49.0, 8.0, 9.0],
        [2.0, 91.4, 20.1, 60.4, 2.0, 10.0],
        [3.0, 85.0, 17.8, 56.1, 14.0, 14.0],
        [3.0, 79.8, 9.8, 44.8, 9.0, 10.0],
        [3.0, 72.0, 10.2, 37.3, 7.0, 9.0],
        [3.0, 95.3, 11.0, 51.5, 15.0, 23.0],
        [3.0, 69.3, 8.5, 39.3, 4.0, 9.0],
        [3.0, 89.8, 11.2, 58.2, 24.0, 25.0],
    ],
    columns=columns,
)


train_features = df_train.drop('bedrooms', axis=1)
train_target = df_train['bedrooms']

df_test = pd.DataFrame(
    [
        [1, 36.5, 5.9, 17.9, 2, 7],
        [2, 71.7, 12.2, 34.3, 5, 21],
        [3, 88.0, 18.1, 58.2, 17, 17],
    ],
    columns=columns,
)

test_features = df_test.drop('bedrooms', axis=1)


def nearest_neighbor_predict(train_features, train_target, new_features):
    distances = []
    for i in range(train_features.shape[0]):
        vector = train_features.loc[i].values
        distances.append(distance.euclidean(new_features, vector))
    best_index = np.array(distances).argmin()
    return train_target.loc[best_index]


class NearestNeighborClassifier:
    def fit(self, features_train, target_train):
        self.features_train = features_train
        self.target_train = target_train

    def predict(self, new_features):
        values = []
        for i in range(new_features.shape[0]):
            vector = new_features.loc[i]
            values.append(
                nearest_neighbor_predict(
                    self.features_train, self.target_train, vector
                )
            )
        return pd.Series(values)


model = NearestNeighborClassifier()
model.fit(train_features, train_target)
new_predictions = model.predict(test_features)
print(new_predictions)
